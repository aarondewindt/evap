// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// AUTHENTICATION
// ==============

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]  
  volunteer     Volunteer?

  is_superuser  Boolean @default(false)
  is_verified   Boolean @default(false)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
 
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}



// DRAAIBOEK
// =========

model Event {
  id                String          @id @default(cuid())
  name              String
  description       String
  notes             String?
  start_datetime    DateTime
  end_datetime      DateTime

  location_id       String?
  location          Location?        @relation(fields: [location_id], references: [id])

  activities        EventActivity[]
  tasks             EventTask[]
}


model Volunteer {
  id                   String          @id @default(cuid())
  name                 String

  user_id              String?         @unique
  user                 User?           @relation(fields: [user_id], references: [id])

  notes                String?

  availability_slots   VolunteerAvailabilitySlot[]
  event_tasks          VolunteerEventTask[]
}


model VolunteerAvailabilitySlot {
  id               String          @id @default(cuid())
  volunteer_id     String
  start_datetime   DateTime
  end_datetime     DateTime

  volunteer        Volunteer       @relation(fields: [volunteer_id], references: [id])
}


model EventActivity {
  id               String          @id @default(cuid())
  event_id         String
  name             String
  description      String
  start_datetime   DateTime
  end_datetime     DateTime
  notes            String?
 
  location_id      String?
  location         Location?        @relation(fields: [location_id], references: [id])
 
  event            Event           @relation(fields: [event_id], references: [id])
}


model EventTask {
  id              String          @id @default(cuid())
  event_id        String
  name            String
  description     String
  start_datetime  DateTime
  end_datetime    DateTime
  notes           String?

  location_id     String?
  location        Location?        @relation(fields: [location_id], references: [id])

  event           Event           @relation(fields: [event_id], references: [id])
  volunteers      VolunteerEventTask[]
}


model VolunteerEventTask {
  id              String          @id @default(cuid())
  volunteer_id    String
  event_task_id   String
  start_datetime  DateTime
  end_datetime    DateTime

  volunteer       Volunteer       @relation(fields: [volunteer_id], references: [id])
  event_task      EventTask       @relation(fields: [event_task_id], references: [id])
}


model Location {
  id                 String          @id @default(cuid())
  name               String
  description        String
  address            String
  maps_url           String 
  notes              String?

  events             Event[]
  event_activities   EventActivity[]
  event_tasks        EventTask[]

}

